//Using a Traditional for Loop
std::vector<int> vec = {10, 20, 30, 40};

for (size_t i = 0; i < vec.size(); ++i) {
    std::cout << vec[i] << " ";
}
// Output: 10 20 30 40


// Using a Range-Based for Loop (C++11 and later)
std::vector<int> vec = {10, 20, 30, 40};

for (int value : vec) {
    std::cout << value << " ";
}
// Output: 10 20 30 40

// If you need to modify the elements, you can use a reference:
for (int &value : vec) {
    value += 1; // Modify each element
}

//Using Iterators
// Iterators provide a more flexible way to traverse a vector, 
// especially useful when you want to manipulate or process elements.
std::vector<int> vec = {10, 20, 30, 40};

for (std::vector<int>::iterator it = vec.begin(); it != vec.end(); ++it) {
    std::cout << *it << " ";
}
// Output: 10 20 30 40

// Using Reverse Iteration
std::vector<int> vec = {10, 20, 30, 40};

for (std::vector<int>::reverse_iterator it = vec.rbegin(); it != vec.rend(); ++it) {
    std::cout << *it << " ";
}
// Output: 40 30 20 10
